# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

from swagger_server.models.player import Player  # noqa: E501
from swagger_server.models.game import Game  # noqa: E501
from swagger_server.models.neural_net_features import NeuralNetFeatures  # noqa: E501s


class NerualNetOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, game: Game=None, features: NeuralNetFeatures=None, chance_to_win: float=None, actual_team_won: bool=None):  # noqa: E501
        """NerualNetOutput - a model defined in Swagger

        :param game: The game of this NerualNetOutput.  # noqa: E501
        :type game: Game
        :param features: The features of this NerualNetOutput.  # noqa: E501
        :type features: NeuralNetFeatures
        :param chance_to_win: The chance_to_win of this NerualNetOutput.  # noqa: E501
        :type chance_to_win: float
        :param actual_team_won: The actual_team_won of this NerualNetOutput.  # noqa: E501
        :type actual_team_won: bool
        """
        self.swagger_types = {
            'game': Game,
            'features': NeuralNetFeatures,
            'chance_to_win': float,
            'actual_team_won': bool
        }

        self.attribute_map = {
            'game': 'game',
            'features': 'features',
            'chance_to_win': 'chance_to_win',
            'actual_team_won': 'actual_team_won'
        }

        self._game = game
        self._features = features
        self._chance_to_win = chance_to_win
        self._actual_team_won = actual_team_won

    @classmethod
    def from_dict(cls, dikt) -> 'NerualNetOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NerualNetOutput of this NerualNetOutput.  # noqa: E501
        :rtype: NerualNetOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game(self) -> Game:
        """Gets the game of this NerualNetOutput.


        :return: The game of this NerualNetOutput.
        :rtype: Game
        """
        return self._game

    @game.setter
    def game(self, game: Game):
        """Sets the game of this NerualNetOutput.


        :param game: The game of this NerualNetOutput.
        :type game: Game
        """

        self._game = game

    @property
    def features(self) -> NeuralNetFeatures:
        """Gets the features of this NerualNetOutput.


        :return: The features of this NerualNetOutput.
        :rtype: NeuralNetFeatures
        """
        return self._features

    @features.setter
    def features(self, features: NeuralNetFeatures):
        """Sets the features of this NerualNetOutput.


        :param features: The features of this NerualNetOutput.
        :type features: NeuralNetFeatures
        """

        self._features = features

    @property
    def chance_to_win(self) -> float:
        """Gets the chance_to_win of this NerualNetOutput.


        :return: The chance_to_win of this NerualNetOutput.
        :rtype: float
        """
        return self._chance_to_win

    @chance_to_win.setter
    def chance_to_win(self, chance_to_win: float):
        """Sets the chance_to_win of this NerualNetOutput.


        :param chance_to_win: The chance_to_win of this NerualNetOutput.
        :type chance_to_win: float
        """

        self._chance_to_win = chance_to_win

    @property
    def actual_team_won(self) -> bool:
        """Gets the actual_team_won of this NerualNetOutput.


        :return: The actual_team_won of this NerualNetOutput.
        :rtype: bool
        """
        return self._actual_team_won

    @actual_team_won.setter
    def actual_team_won(self, actual_team_won: bool):
        """Sets the actual_team_won of this NerualNetOutput.


        :param actual_team_won: The actual_team_won of this NerualNetOutput.
        :type actual_team_won: bool
        """

        self._actual_team_won = actual_team_won
