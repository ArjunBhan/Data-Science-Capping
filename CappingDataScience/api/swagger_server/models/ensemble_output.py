# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
from swagger_server.models.game import Game
from swagger_server.models.team import Team


class EnsembleOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, games: List[Game]=None, teams: List[Team]=None, betting_bot_bet_on_games: List[bool]=None, neural_network_prob: List[float]=None):  # noqa: E501
        """EnsembleOutput - a model defined in Swagger

        :param games: The games of this EnsembleOutput.  # noqa: E501
        :type games: List[Game]
        :param teams: The teams of this EnsembleOutput.  # noqa: E501
        :type teams: List[Team]
        :param betting_bot_bet_on_games: The betting_bot_bet_on_games of this EnsembleOutput.  # noqa: E501
        :type betting_bot_bet_on_games: List[bool]
        :param neural_network_prob: The neural_network_prob of this EnsembleOutput.  # noqa: E501
        :type neural_network_prob: List[float]
        """
        self.swagger_types = {
            'games': List[Game],
            'teams': List[Team],
            'betting_bot_bet_on_games': List[bool],
            'neural_network_prob': List[float]
        }

        self.attribute_map = {
            'games': 'games',
            'teams': 'teams',
            'betting_bot_bet_on_games': 'betting_bot_bet_on_games',
            'neural_network_prob': 'neural_network_prob'
        }

        self._games = games
        self._teams = teams
        self._betting_bot_bet_on_games = betting_bot_bet_on_games
        self._neural_network_prob = neural_network_prob

    @classmethod
    def from_dict(cls, dikt) -> 'EnsembleOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnsembleOutput of this EnsembleOutput.  # noqa: E501
        :rtype: EnsembleOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def games(self) -> List[Game]:
        """Gets the games of this EnsembleOutput.


        :return: The games of this EnsembleOutput.
        :rtype: List[Game]
        """
        return self._games

    @games.setter
    def games(self, games: List[Game]):
        """Sets the games of this EnsembleOutput.


        :param games: The games of this EnsembleOutput.
        :type games: List[Game]
        """

        self._games = games

    @property
    def teams(self) -> List[Team]:
        """Gets the teams of this EnsembleOutput.


        :return: The teams of this EnsembleOutput.
        :rtype: List[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams: List[Team]):
        """Sets the teams of this EnsembleOutput.


        :param teams: The teams of this EnsembleOutput.
        :type teams: List[Team]
        """

        self._teams = teams

    @property
    def betting_bot_bet_on_games(self) -> List[bool]:
        """Gets the betting_bot_bet_on_games of this EnsembleOutput.


        :return: The betting_bot_bet_on_games of this EnsembleOutput.
        :rtype: List[bool]
        """
        return self._betting_bot_bet_on_games

    @betting_bot_bet_on_games.setter
    def betting_bot_bet_on_games(self, betting_bot_bet_on_games: List[bool]):
        """Sets the betting_bot_bet_on_games of this EnsembleOutput.


        :param betting_bot_bet_on_games: The betting_bot_bet_on_games of this EnsembleOutput.
        :type betting_bot_bet_on_games: List[bool]
        """

        self._betting_bot_bet_on_games = betting_bot_bet_on_games

    @property
    def neural_network_prob(self) -> List[float]:
        """Gets the neural_network_prob of this EnsembleOutput.


        :return: The neural_network_prob of this EnsembleOutput.
        :rtype: List[float]
        """
        return self._neural_network_prob

    @neural_network_prob.setter
    def neural_network_prob(self, neural_network_prob: List[float]):
        """Sets the neural_network_prob of this EnsembleOutput.


        :param neural_network_prob: The neural_network_prob of this EnsembleOutput.
        :type neural_network_prob: List[float]
        """

        self._neural_network_prob = neural_network_prob
