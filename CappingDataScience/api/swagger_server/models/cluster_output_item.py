# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClusterOutputItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, player_id: int=None, average_points: float=None, average_assists: float=None, average_steals: float=None, average_blocks: float=None, offense_label: int=None, defense_label: int=None):  # noqa: E501
        """ClusterOutputItem - a model defined in Swagger

        :param player_id: The player_id of this ClusterOutputItem.  # noqa: E501
        :type player_id: int
        :param average_points: The average_points of this ClusterOutputItem.  # noqa: E501
        :type average_points: float
        :param average_assists: The average_assists of this ClusterOutputItem.  # noqa: E501
        :type average_assists: float
        :param average_steals: The average_steals of this ClusterOutputItem.  # noqa: E501
        :type average_steals: float
        :param average_blocks: The average_blocks of this ClusterOutputItem.  # noqa: E501
        :type average_blocks: float
        :param offense_label: The offense_label of this ClusterOutputItem.  # noqa: E501
        :type offense_label: int
        :param defense_label: The defense_label of this ClusterOutputItem.  # noqa: E501
        :type defense_label: int
        """
        self.swagger_types = {
            'player_id': int,
            'average_points': float,
            'average_assists': float,
            'average_steals': float,
            'average_blocks': float,
            'offense_label': int,
            'defense_label': int
        }

        self.attribute_map = {
            'player_id': 'player_id',
            'average_points': 'average_points',
            'average_assists': 'average_assists',
            'average_steals': 'average_steals',
            'average_blocks': 'average_blocks',
            'offense_label': 'offense_label',
            'defense_label': 'defense_label'
        }

        self._player_id = player_id
        self._average_points = average_points
        self._average_assists = average_assists
        self._average_steals = average_steals
        self._average_blocks = average_blocks
        self._offense_label = offense_label
        self._defense_label = defense_label

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterOutputItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterOutputItem of this ClusterOutputItem.  # noqa: E501
        :rtype: ClusterOutputItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def player_id(self) -> int:
        """Gets the player_id of this ClusterOutputItem.


        :return: The player_id of this ClusterOutputItem.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id: int):
        """Sets the player_id of this ClusterOutputItem.


        :param player_id: The player_id of this ClusterOutputItem.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def average_points(self) -> float:
        """Gets the average_points of this ClusterOutputItem.


        :return: The average_points of this ClusterOutputItem.
        :rtype: float
        """
        return self._average_points

    @average_points.setter
    def average_points(self, average_points: float):
        """Sets the average_points of this ClusterOutputItem.


        :param average_points: The average_points of this ClusterOutputItem.
        :type average_points: float
        """

        self._average_points = average_points

    @property
    def average_assists(self) -> float:
        """Gets the average_assists of this ClusterOutputItem.


        :return: The average_assists of this ClusterOutputItem.
        :rtype: float
        """
        return self._average_assists

    @average_assists.setter
    def average_assists(self, average_assists: float):
        """Sets the average_assists of this ClusterOutputItem.


        :param average_assists: The average_assists of this ClusterOutputItem.
        :type average_assists: float
        """

        self._average_assists = average_assists

    @property
    def average_steals(self) -> float:
        """Gets the average_steals of this ClusterOutputItem.


        :return: The average_steals of this ClusterOutputItem.
        :rtype: float
        """
        return self._average_steals

    @average_steals.setter
    def average_steals(self, average_steals: float):
        """Sets the average_steals of this ClusterOutputItem.


        :param average_steals: The average_steals of this ClusterOutputItem.
        :type average_steals: float
        """

        self._average_steals = average_steals

    @property
    def average_blocks(self) -> float:
        """Gets the average_blocks of this ClusterOutputItem.


        :return: The average_blocks of this ClusterOutputItem.
        :rtype: float
        """
        return self._average_blocks

    @average_blocks.setter
    def average_blocks(self, average_blocks: float):
        """Sets the average_blocks of this ClusterOutputItem.


        :param average_blocks: The average_blocks of this ClusterOutputItem.
        :type average_blocks: float
        """

        self._average_blocks = average_blocks

    @property
    def offense_label(self) -> int:
        """Gets the offense_label of this ClusterOutputItem.


        :return: The offense_label of this ClusterOutputItem.
        :rtype: int
        """
        return self._offense_label

    @offense_label.setter
    def offense_label(self, offense_label: int):
        """Sets the offense_label of this ClusterOutputItem.


        :param offense_label: The offense_label of this ClusterOutputItem.
        :type offense_label: int
        """

        self._offense_label = offense_label

    @property
    def defense_label(self) -> int:
        """Gets the defense_label of this ClusterOutputItem.


        :return: The defense_label of this ClusterOutputItem.
        :rtype: int
        """
        return self._defense_label

    @defense_label.setter
    def defense_label(self, defense_label: int):
        """Sets the defense_label of this ClusterOutputItem.


        :param defense_label: The defense_label of this ClusterOutputItem.
        :type defense_label: int
        """

        self._defense_label = defense_label
